#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Network Exploit Manager (plain output)
- No emojis
- No color markup
- Clean terminal output using rich tables/panels (unstyled text)
"""

import os
import socket
import sys
import time
import yaml
from pathlib import Path
from typing import List, Optional
from dataclasses import dataclass

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich import box

console = Console(record=False)

MODULE_INFO = {
    "name": "Network Exploit Manager",
    "description": "Port-based network services exploitation",
    "author": "Lazy Framework Team",
    "license": "MIT",
    "platform": "Multi",
    "rank": "Excellent",
    "dependencies": ["requests", "rich", "pyyaml"]
}

OPTIONS = {
    "TARGET": {
        "description": "Target IP address",
        "required": True,
        "default": "192.168.1.100"
    },
    "PORTS": {
        "description": "Specific ports to scan (comma separated)",
        "required": False,
        "default": ""
    }
}


@dataclass
class ServiceExploit:
    id: str
    name: str
    port: int
    protocol: str
    service: str
    risk: str
    description: str
    author: str
    code: Optional[str] = ""
    verified: bool = False


class NetworkExploitManager:
    def __init__(self, options):
        self.options = options or {}
        self.target = self.options.get("TARGET", OPTIONS["TARGET"]["default"])
        self.ports = self.options.get("PORTS", OPTIONS["PORTS"]["default"])
        self.exploits: List[ServiceExploit] = []
        self.open_ports: List[tuple] = []

        self.load_exploits()
        self.scan_ports()

    def load_exploits(self):
        """Load service exploits from YAML or create samples if missing."""
        base_path = Path(__file__).parent
        exploits_file = base_path / "service_exploits.yaml"

        if exploits_file.exists():
            try:
                with exploits_file.open("r", encoding="utf-8") as f:
                    data = yaml.safe_load(f) or {}
                for exp_id, exp_data in data.items():
                    # Ensure required fields exist, supply defaults if missing
                    exp = ServiceExploit(
                        id=exp_id,
                        name=exp_data.get("name", exp_id),
                        port=int(exp_data.get("port", 0)),
                        protocol=exp_data.get("protocol", "tcp"),
                        service=exp_data.get("service", "unknown"),
                        risk=str(exp_data.get("risk", "low")).lower(),
                        description=exp_data.get("description", ""),
                        author=exp_data.get("author", "unknown"),
                        code=exp_data.get("code", ""),
                        verified=bool(exp_data.get("verified", False))
                    )
                    self.exploits.append(exp)
                console.print(f"Loaded {len(self.exploits)} service exploits.")
            except Exception as e:
                console.print(f"Failed to load YAML: {e}")
                self.create_sample_exploits()
        else:
            console.print("service_exploits.yaml not found. Creating sample exploits.")
            self.create_sample_exploits()

    def create_sample_exploits(self):
        sample = [
            ServiceExploit(
                id="ftp-anon",
                name="FTP Anonymous Login",
                port=21,
                protocol="tcp",
                service="ftp",
                risk="medium",
                description="Anonymous FTP access exploitation",
                author="LazyTeam",
                verified=True
            ),
            ServiceExploit(
                id="ssh-brute",
                name="SSH Brute Force",
                port=22,
                protocol="tcp",
                service="ssh",
                risk="medium",
                description="SSH credential brute forcing",
                author="LazyTeam",
                verified=True
            ),
            ServiceExploit(
                id="smtp-user-enum",
                name="SMTP User Enumeration",
                port=25,
                protocol="tcp",
                service="smtp",
                risk="low",
                description="SMTP VRFY user enumeration",
                author="LazyTeam",
                verified=True
            ),
            ServiceExploit(
                id="smb-ms17-010",
                name="EternalBlue SMB Exploit",
                port=445,
                protocol="tcp",
                service="smb",
                risk="critical",
                description="MS17-010 SMB remote code execution",
                author="Shadow Brokers",
                verified=True
            ),
            ServiceExploit(
                id="redis-unauth",
                name="Redis Unauthorized Access",
                port=6379,
                protocol="tcp",
                service="redis",
                risk="high",
                description="Redis unauthorized access leading to RCE",
                author="LazyTeam",
                verified=True
            ),
        ]
        self.exploits = sample
        console.print(f"Created {len(self.exploits)} sample exploits.")

    def scan_ports(self):
        """Scan a set of common ports on the target."""
        console.print(f"Scanning {self.target} for open ports...")
        # Default common ports
        common_ports = [
            (21, "ftp"), (22, "ssh"), (23, "telnet"), (25, "smtp"), (53, "dns"),
            (80, "http"), (110, "pop3"), (111, "rpcbind"), (135, "rpc"),
            (139, "netbios"), (143, "imap"), (443, "https"), (445, "smb"),
            (993, "imaps"), (995, "pop3s"), (1433, "mssql"), (1521, "oracle"),
            (2049, "nfs"), (3306, "mysql"), (3389, "rdp"), (5432, "postgresql"),
            (5900, "vnc"), (6379, "redis"), (27017, "mongodb")
        ]

        # If user provided ports, override
        if self.ports:
            port_list = []
            for p in str(self.ports).split(","):
                try:
                    port_int = int(p.strip())
                    port_list.append((port_int, "custom"))
                except ValueError:
                    continue
            if port_list:
                common_ports = port_list

        open_found = []
        total = len(common_ports)
        for idx, (port, svc) in enumerate(common_ports, start=1):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1.0)
                res = sock.connect_ex((self.target, port))
                sock.close()
                if res == 0:
                    open_found.append((port, svc))
            except Exception:
                pass
        self.open_ports = open_found
        console.print(f"Found {len(self.open_ports)} open ports.")

    def show_dashboard(self):
        console.clear()
        header_text = (
            f"Network Exploit Manager\n"
            f"Target: {self.target} | Open ports: {len(self.open_ports)} | Exploits: {len(self.exploits)}"
        )
        console.print(Panel(header_text, title="HEADER"))

        # Open ports table
        if self.open_ports:
            table = Table(show_header=True, header_style=None, box=box.SIMPLE)
            table.add_column("Port", width=8, justify="right")
            table.add_column("Service", width=12)
            table.add_column("Status", width=8)
            table.add_column("Exploits", width=8, justify="right")

            for port, svc in self.open_ports:
                exploit_count = sum(1 for e in self.exploits if e.port == port)
                table.add_row(str(port), svc.upper(), "OPEN", str(exploit_count))

            console.print(Panel(table, title="Open Ports"))
        else:
            console.print(Panel("No open ports found.", title="Open Ports"))

    def show_exploits_table(self, service_filter: Optional[str] = None):
        if service_filter:
            filtered = [e for e in self.exploits if e.service.lower() == service_filter.lower()]
            title = f"Exploits for {service_filter.upper()}"
        else:
            filtered = list(self.exploits)
            title = "Available Exploits"

        if not filtered:
            console.print(f"No exploits found for '{service_filter}'." if service_filter else "No exploits available.")
            return

        table = Table(show_header=True, header_style=None, box=box.SIMPLE)
        table.add_column("ID", width=16)
        table.add_column("Service", width=30)
        table.add_column("Name", width=30)
        table.add_column("Risk", width=30)
        table.add_column("Port", width=30, justify="right")

        for e in filtered:
            table.add_row(e.id, e.service.upper(), e.name, e.risk.upper(), str(e.port))

        console.print(Panel(table, title=title))

    def show_exploit_details(self, exploit_id: str):
        exp = next((x for x in self.exploits if x.id == exploit_id), None)
        if not exp:
            console.print(f"Exploit '{exploit_id}' not found.")
            return

        info = (
            f"Name     : {exp.name}\n"
            f"ID       : {exp.id}\n"
            f"Service  : {exp.service.upper()}\n"
            f"Port     : {exp.port}/{exp.protocol}\n"
            f"Risk     : {exp.risk.upper()}\n"
            f"Author   : {exp.author}\n"
            f"Verified : {'Yes' if exp.verified else 'No'}\n\n"
            f"Description:\n{exp.description}\n"
        )
        console.print(Panel(info, title="Exploit Details"))

        if exp.code:
            console.print(Panel(exp.code, title="Exploit Code (preview)"))

    def run_exploit(self, exploit_id: str):
        exp = next((x for x in self.exploits if x.id == exploit_id), None)
        if not exp:
            console.print(f"Exploit '{exploit_id}' not found.")
            return

        console.print(Panel(f"Executing exploit '{exp.name}' against {self.target}:{exp.port}", title="Execute"))
        if not Confirm.ask("Continue? (y/n)"):
            console.print("Execution cancelled.")
            return

        # Simulate execution (safe)
        console.print("Running (simulation)...")
        time.sleep(2)
        if exp.risk.lower() == "critical":
            console.print("RESULT: Exploit simulation: SUCCESS (simulated).")
        elif exp.risk.lower() == "high":
            console.print("RESULT: Exploit simulation: PARTIAL (simulated).")
        elif exp.risk.lower() == "medium":
            console.print("RESULT: Exploit simulation: NOTICE (simulated).")
        else:
            console.print("RESULT: Exploit simulation: INFORMATION (simulated).")

    def show_services_menu(self):
        # Build services summary
        services = {}
        for e in self.exploits:
            services.setdefault(e.service, 0)
            services[e.service] += 1

        rows = []
        for i, (svc, cnt) in enumerate(sorted(services.items()), start=1):
            rows.append(f"{i}. {svc.upper()} ({cnt})  - command: list {svc}")

        text = "Available services:\n" + "\n".join(rows) if rows else "No services available."
        console.print(Panel(text, title="Services"))

    def interactive_shell(self):
        console.print("Type 'help' for available commands.")
        while True:
            try:
                cmd = Prompt.ask(f"lzf({self.target})").strip()
                if not cmd:
                    continue
                parts = cmd.split()
                action = parts[0].lower()
                args = parts[1:]

                if action in ("exit", "quit"):
                    break
                elif action == "help":
                    self.show_help()
                elif action == "services":
                    self.show_services_menu()
                elif action == "list":
                    if args:
                        self.show_exploits_table(args[0])
                    else:
                        self.show_exploits_table()
                elif action == "show":
                    if args:
                        self.show_exploit_details(args[0])
                    else:
                        console.print("Usage: show [exploit_id]")
                elif action == "run":
                    if args:
                        self.run_exploit(args[0])
                    else:
                        console.print("Usage: run [exploit_id]")
                elif action == "scan":
                    self.scan_ports()
                    self.show_dashboard()
                elif action == "target":
                    if args:
                        self.target = args[0]
                        console.print(f"Target set to: {self.target}")
                        self.scan_ports()
                        self.show_dashboard()
                    else:
                        console.print(f"Current target: {self.target}")
                elif action == "clear":
                    console.clear()
                    self.show_dashboard()
                else:
                    console.print("Unknown command. Type 'help' for available commands.")
            except KeyboardInterrupt:
                console.print("\nUse 'exit' to quit.")
            except Exception as e:
                console.print(f"Error: {e}")

    def show_help(self):
        help_text = (
            "Available commands:\n"
            "  services               - Show available services\n"
            "  list [service]         - List exploits (optionally filtered by service)\n"
            "  show [id]              - Show exploit details\n"
            "  run [id]               - Run exploit (simulation)\n"
            "  scan                   - Rescan ports\n"
            "  target [ip]            - Set new target IP\n"
            "  clear                  - Clear screen and show dashboard\n"
            "  exit                   - Exit program\n"
        )
        console.print(Panel(help_text, title="Help"))

    def run(self):
        self.show_dashboard()
        self.show_services_menu()
        self.interactive_shell()


def run(session=None, options=None):
    manager = NetworkExploitManager(options or {})
    manager.run()


if __name__ == "__main__":
    # allow running as standalone
    opts = {"TARGET": "127.0.0.1", "PORTS": ""}
    manager = NetworkExploitManager(opts)
    manager.run()
