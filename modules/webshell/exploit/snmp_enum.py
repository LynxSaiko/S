# exploit/snmp_enum.py
"""
SNMP Enumeration Module
- pysnmp + tqdm + Panel output
- Termux 100% jalan
- Progress bar muncul di Panel
"""

from pysnmp.hlapi import *
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from tqdm import tqdm
import sys

console = Console()

# Community wordlist
COMMUNITIES = ["public", "private", "admin", "manager", "default", "guest", "test"]

# OIDs
OIDS = {
    "sysDescr": "1.3.6.1.2.1.1.1.0",
    "sysName":  "1.3.6.1.2.1.1.5.0",
    "sysUpTime": "1.3.6.1.2.1.1.3.0",
}

def snmp_get(community, ip, port, oid):
    try:
        iterator = getCmd(
            SnmpEngine(),
            CommunityData(community, mpModel=1),
            UdpTransportTarget((ip, port), timeout=2.0, retries=1),
            ContextData(),
            ObjectType(ObjectIdentity(oid))
        )
        errorIndication, errorStatus, errorIndex, varBinds = next(iterator)
        if errorIndication or errorStatus:
            return None
        return varBinds[0][1] if varBinds else None
    except:
        return None

def snmp_walk(community, ip, port, base_oid):
    results = []
    try:
        for (errorIndication, errorStatus, errorIndex, varBinds) in nextCmd(
            SnmpEngine(),
            CommunityData(community, mpModel=1),
            UdpTransportTarget((ip, port), timeout=2.0, retries=1),
            ContextData(),
            ObjectType(ObjectIdentity(base_oid)),
            lexicographicMode=False
        ):
            if errorIndication or errorStatus:
                break
            for varBind in varBinds:
                results.append(f"{varBind[0].prettyPrint()} = {varBind[1].prettyPrint()}")
    except:
        pass
    return results

def run_exploit(target):
    port = 161
    console.print(f"[*] SNMP Enumeration → {target}:{port}")

    valid_community = None

    # TQDM DENGAN file=sys.stdout → PASTI TERTANGKAP
    with tqdm(
        total=len(COMMUNITIES),
        desc="Testing communities",
        bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}]",
        colour="cyan",
        file=sys.stdout  # PAKSA KE STDOUT
    ) as pbar:
        for community in COMMUNITIES:
            pbar.set_postfix_str(f"trying: {community}")
            val = snmp_get(community, target, port, OIDS["sysDescr"])
            if val is not None:
                pbar.colour = "green"
                pbar.set_description_str(f"Found: {community}")
                valid_community = community
                break
            pbar.update(1)

    if not valid_community:
        console.print(Panel("No valid community!", title="FAILED", style="red"))
        return "FAILED"

    console.print(f"[bold green][+] Valid community: {valid_community}[/]")

    # Get system info
    info = {}
    for name, oid in OIDS.items():
        val = snmp_get(valid_community, target, port, oid)
        if val: info[name] = str(val)

    # Walk interfaces
    console.print("[*] Walking interfaces...")
    interfaces = snmp_walk(valid_community, target, port, "1.3.6.1.2.1.2.2.1.2")
    console.print(f"[+] Found {len(interfaces)} interfaces")

    # Walk IPs
    console.print("[*] Walking IP addresses...")
    ip_addrs = snmp_walk(valid_community, target, port, "1.3.6.1.2.1.4.20.1.1")
    console.print(f"[+] Found {len(ip_addrs)} IP entries")

    # Summary Table
    table = Table(title="SNMP Results")
    table.add_column("Field", style="cyan")
    table.add_column("Value")
    for k, v in info.items():
        table.add_row(k, v)
    table.add_row("Community", f"[bold green]{valid_community}[/]")
    table.add_row("Interfaces", str(len(interfaces)))
    table.add_row("IP Entries", str(len(ip_addrs)))
    console.print(table)

    console.print(Panel(
        f"SNMP Enumeration Complete!\nCommunity: {valid_community}\nTarget: {target}",
        title="SUCCESS", style="green"
    ))

    return f"SUCCESS - {valid_community}"
