#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Network Exploit Manager
- Modular design dengan exploits terpisah
- Real code execution
- Clean output
"""

import os
import sys
import importlib.util
import threading
import time
import queue
from pathlib import Path
from typing import List
from dataclasses import dataclass

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich import box
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from io import StringIO

console = Console()

MODULE_INFO = {
    "name": "Network Exploit Manager",
    "description": "Port-based network services exploitation with real code execution",
    "author": "Lazy Framework Team",
    "license": "MIT",
    "platform": "Multi",
    "rank": "Excellent",
    "dependencies": ["rich"]
}

OPTIONS = {
    "TARGET": {
        "description": "Target IP address",
        "required": True,
        "default": "192.168.1.100"
    },
    "PORTS": {
        "description": "Specific ports to scan (comma separated)",
        "required": False,
        "default": ""
    }
}

@dataclass
class ServiceExploit:
    id: str
    name: str
    port: int
    protocol: str
    service: str
    risk: str
    description: str
    author: str
    module: str  # Nama file module tanpa .py
    verified: bool = False

class NetworkExploitManager:
    def __init__(self, options):
        self.options = options or {}
        self.target = self.options.get("TARGET", OPTIONS["TARGET"]["default"])
        self.ports = self.options.get("PORTS", OPTIONS["PORTS"]["default"])
        self.exploits: List[ServiceExploit] = []
        self.exploits_dir = Path("/data/data/com.termux/files/home/S/modules/webshell/exploit")

        if not self.exploits_dir.exists():
            console.print(f"ERROR: Exploits directory not found: {self.exploits_dir}")
            # Fallback ke directory module
            self.exploits_dir = Path(__file__).parent
            console.print(f"Using fallback directory: {self.exploits_dir}")
        
        console.print(f"Exploits directory: {self.exploits_dir}")
        self.load_exploits()

    def load_exploits(self):
        """Load exploits dari file terpisah"""
        exploits_data = [
            {
                "id": "ftp-anon",
                "name": "FTP Anonymous Login",
                "port": 21,
                "protocol": "tcp", 
                "service": "ftp",
                "risk": "medium",
                "description": "Exploit FTP servers with anonymous authentication",
                "author": "Lazy Framework Team",
                "module": "ftp_anonymous",
                "verified": True
            },
            {
                "id": "ssh-brute", 
                "name": "SSH Brute Force",
                "port": 22,
                "protocol": "tcp",
                "service": "ssh",
                "risk": "medium",
                "description": "SSH credential brute force attack",
                "author": "Lazy Framework Team",
                "module": "ssh_bruteforce",
                "verified": True
            },
            {
                "id": "smb-anon",
                "name": "SMB Anonymous Share",
                "port": 445,
                "protocol": "tcp",
                "service": "smb",
                "risk": "medium",
                "description": "Access SMB shares with anonymous credentials",
                "author": "Lazy Framework Team", 
                "module": "smb_anonymous",
                "verified": True
            },
            {
                "id": "snmp-enum",
                "name": "SNMP Enumeration",
                "port": 161,
                "protocol": "udp",
                "service": "snmp",
                "risk": "medium",
                "description": "Enumerate SNMP services",
                "author": "Lazy Framework Team",
                "module": "snmp_enum",
                "verified": True
            },
            {
                "id": "mysql-unauth",
                "name": "MySQL Unauthorized Access",
                "port": 3306,
                "protocol": "tcp",
                "service": "mysql",
                "risk": "high",
                "description": "MySQL database unauthorized access",
                "author": "Lazy Framework Team",
                "module": "mysql_unauth",
                "verified": True
            },
            {
                "id": "redis-unauth",
                "name": "Redis Unauthorized Access", 
                "port": 6379,
                "protocol": "tcp",
                "service": "redis",
                "risk": "high",
                "description": "Redis unauthorized access exploitation",
                "author": "Lazy Framework Team",
                "module": "redis_unauth",
                "verified": True
            }
        ]
        
        for data in exploits_data:
            self.exploits.append(ServiceExploit(**data))
        
        console.print(f"Loaded {len(self.exploits)} exploit modules")

    def show_dashboard(self):
        """Tampilan dashboard"""
        console.clear()
        console.print(Panel(
            f"Network Exploit Manager\nTarget: {self.target} | Exploits: {len(self.exploits)}",
            title="EXPLOIT MANAGER"
        ))
        console.print()

    def list_exploits(self, service_filter=None):
        """List semua exploits"""
        if service_filter:
            filtered = [e for e in self.exploits if e.service.lower() == service_filter.lower()]
            title = f"EXPLOITS FOR {service_filter.upper()}"
        else:
            filtered = self.exploits
            title = "AVAILABLE EXPLOITS"

        if not filtered:
            console.print("No exploits found")
            return

        table = Table(box=box.SIMPLE, show_header=True)
        table.add_column("ID", style="red", width=30, overflow="fold")
        table.add_column("Service", width=30)
        table.add_column("Name", width=30, overflow="fold")
        table.add_column("Risk", width=15)
        table.add_column("Port", width=30)
        table.add_column("Description")

        for exp in filtered:
            table.add_row(
                exp.id,
                exp.service.upper(),
                exp.name,
                exp.risk.upper(),
                str(exp.port),
                exp.description
            )

        console.print(Panel(table, title=title))

    def show_exploit_details(self, exploit_id):
        """Show detail exploit"""
        exploit = next((e for e in self.exploits if e.id == exploit_id), None)
        if not exploit:
            console.print(f"Exploit {exploit_id} not found")
            return

        info = f"""Name: {exploit.name}
ID: {exploit.id}
Service: {exploit.service.upper()}
Port: {exploit.port}/{exploit.protocol}
Risk: {exploit.risk.upper()}
Author: {exploit.author}
Verified: {'Yes' if exploit.verified else 'No'}
Module: {exploit.module}.py

Description:
{exploit.description}"""

        console.print(Panel(info, title="EXPLOIT DETAILS"))

    def run_exploit(self, exploit_id):
        """Run exploit dengan module terpisah - FIXED VERSION"""
        exploit = next((e for e in self.exploits if e.id == exploit_id), None)
        if not exploit:
            console.print(f"Exploit {exploit_id} not found")
            return
            
        console.print(Panel(
            f"Running: {exploit.name}\nTarget: {self.target}:{exploit.port}",
            title="EXECUTING EXPLOIT"
        ))
        
        if not Confirm.ask("Continue?"):
            console.print("Cancelled")
            return
            
        # Load dan execute module
        module_path = self.exploits_dir / f"{exploit.module}.py"
        
        if not module_path.exists():
            console.print(f"[red]Module {exploit.module}.py not found at: {module_path}[/red]")
            
            # Tampilkan file yang tersedia
            available_modules = list(self.exploits_dir.glob("*.py"))
            if available_modules:
                console.print("[yellow]Available modules:[/yellow]")
                for mod in available_modules:
                    console.print(f"  - {mod.name}")
            return
            
        try:
            # Import module dynamically
            spec = importlib.util.spec_from_file_location(exploit.module, module_path)
            module = importlib.util.module_from_spec(spec)
            
            # Setup untuk execution dengan rich progress
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(bar_width=40),
                TaskProgressColumn(),
                TextColumn("{task.fields[status]}"),
                console=console,
                transient=False,
            ) as progress:
                
                task = progress.add_task(
                    f"Running {exploit.name}...", 
                    total=100, 
                    status="Starting...",
                    start=False
                )
                
                # Thread untuk menjalankan exploit
                output_queue = queue.Queue()
                result_queue = queue.Queue()
                
                def run_in_thread():
                    """Function yang dijalankan di thread terpisah"""
                    try:
                        # Redirect stdout untuk capture output
                        old_stdout = sys.stdout
                        sys.stdout = capture = StringIO()
                        
                        # Progress simulation
                        def update_progress(current=None, total=None, status=None):
                            if current is not None:
                                progress.update(task, completed=current)
                            if status is not None:
                                progress.update(task, status=status)
                        
                        # Coba berbagai kemungkinan nama fungsi
                        result = "UNKNOWN"
                        
                        if hasattr(module, 'run_exploit'):
                            result = module.run_exploit(self.target, progress_callback=update_progress)
                        elif hasattr(module, 'exploit'):
                            result = module.exploit(self.target)
                        elif hasattr(module, 'main'):
                            result = module.main(self.target)
                        elif hasattr(module, 'run'):
                            result = module.run(self.target)
                        else:
                            # Execute module langsung
                            spec.loader.exec_module(module)
                            result = "Module executed (no specific function called)"
                        
                        # Update progress ke 100%
                        progress.update(task, completed=100, status="Completed")
                        
                        # Get captured output
                        captured_output = capture.getvalue()
                        sys.stdout = old_stdout
                        
                        output_queue.put(captured_output)
                        result_queue.put(result)
                        
                    except Exception as e:
                        error_msg = f"[ERROR] {str(e)}"
                        output_queue.put(error_msg)
                        result_queue.put(f"FAILED: {str(e)}")
                        progress.update(task, completed=100, status="Failed")
                
                # Start thread dan progress
                progress.start_task(task)
                thread = threading.Thread(target=run_in_thread, daemon=True)
                thread.start()
                
                # Update progress secara bertahap jika tidak ada update dari module
                start_time = time.time()
                timeout = 30  # 30 detik timeout
                last_progress = 0
                
                while thread.is_alive():
                    current_time = time.time()
                    
                    # Increment progress otomatis jika stuck
                    if current_time - start_time > 2 and last_progress < 90:
                        last_progress += 5
                        progress.update(task, completed=min(last_progress, 90))
                    
                    # Check timeout
                    if current_time - start_time > timeout:
                        progress.update(task, status="Timeout!")
                        console.print(f"\n[red]Timeout after {timeout} seconds[/red]")
                        break
                        
                    time.sleep(0.5)
                
                # Pastikan progress 100% jika completed
                if thread.is_alive():
                    progress.update(task, completed=100, status="Finishing...")
                else:
                    progress.update(task, completed=100, status="Completed")
                
                # Tunggu thread selesai
                thread.join(timeout=2)
            
            # Get results
            captured_output = ""
            try:
                captured_output = output_queue.get(timeout=2)
            except queue.Empty:
                captured_output = "No output captured"
                
            result = "UNKNOWN"
            try:
                result = result_queue.get(timeout=2)
            except queue.Empty:
                result = "No result returned"
            
            # Display output
            if captured_output and captured_output.strip() != "No output captured":
                console.print(Panel(
                    captured_output,
                    title="EXPLOIT OUTPUT",
                    border_style="bright_magenta",
                    padding=(1, 2)
                ))
            
            # Display result
            if "FAILED" in str(result).upper() or "ERROR" in str(result).upper() or "UNKNOWN" in str(result).upper():
                console.print(f"\n[bold red]Result: {result}[/bold red]")
            else:
                console.print(f"\n[bold green]Result: {result}[/bold green]")
                
        except Exception as e:
            console.print(f"[red]Error loading/running module: {e}[/red]")
            import traceback
            console.print(f"[red]{traceback.format_exc()}[/red]")

    def show_services(self):
        """Show available services"""
        services = {}
        for exp in self.exploits:
            services[exp.service] = services.get(exp.service, 0) + 1
            
        table = Table(box=box.SIMPLE, show_header=True, header_style="bold blue")
        table.add_column("Service", style="cyan", width=20)
        table.add_column("Exploit Count", style="green", width=15)
        
        for service, count in services.items():
            table.add_row(service.upper(), str(count))
            
        console.print(Panel(table, title="AVAILABLE SERVICES"))

    def show_help(self):
        """Show help"""
        help_text = """
Commands:
  services               - Show available services
  list [service]         - List exploits (optionally by service)
  show [id]              - Show exploit details  
  run [id]               - Run exploit
  target [ip]            - Set target
  clear                  - Clear screen
  help                   - Show this help
  exit                   - Exit

Examples:
  list ftp               - List FTP exploits
  show ftp-anon          - Show FTP anonymous exploit details
  run ftp-anon           - Run FTP anonymous exploit
  target 10.0.0.5        - Set target to 10.0.0.5
"""
        console.print(Panel(help_text, title="HELP"))

    def interactive_shell(self):
        """Main interactive shell"""
        console.print("Type 'help' for commands\n")
        
        while True:
            try:
                cmd = Prompt.ask(f"exploits[{self.target}]").strip()
                if not cmd:
                    continue
                    
                parts = cmd.split()
                action = parts[0].lower()
                args = parts[1:]
                
                if action in ['exit', 'quit']:
                    break
                elif action == 'help':
                    self.show_help()
                elif action == 'services':
                    self.show_services()
                elif action == 'list':
                    self.list_exploits(args[0] if args else None)
                elif action == 'show':
                    if args:
                        self.show_exploit_details(args[0])
                    else:
                        console.print("Usage: show [exploit_id]")
                elif action == 'run':
                    if args:
                        self.run_exploit(args[0])
                    else:
                        console.print("Usage: run [exploit_id]")
                elif action == 'target':
                    if args:
                        self.target = args[0]
                        console.print(f"Target set to: {self.target}")
                    else:
                        console.print(f"Current target: {self.target}")
                elif action == 'clear':
                    console.clear()
                    self.show_dashboard()
                else:
                    console.print("Unknown command. Type 'help' for commands.")
                    
                console.print()
                
            except KeyboardInterrupt:
                console.print("\nUse 'exit' to quit")
            except Exception as e:
                console.print(f"Error: {e}")

    def run(self):
        """Main run method"""
        self.show_dashboard()
        self.show_services()
        self.interactive_shell()

def run(session=None, options=None):
    manager = NetworkExploitManager(options or {})
    manager.run()

if __name__ == "__main__":
    run()
